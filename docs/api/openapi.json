{"openapi": "3.1.0", "info": {"title": "FTV Backend API", "version": "2.0.0", "description": "Organized API for FTV backend application with modular structure"}, "paths": {"/api/hello": {"get": {"operationId": "backend_api_modules_core_hello", "summary": "Hello", "parameters": [{"in": "query", "name": "name", "schema": {"default": "World", "title": "Name", "type": "string"}, "required": false}], "responses": {"200": {"description": "OK"}}, "description": "Simple hello world endpoint.\n\nBasic test endpoint to verify API functionality.\n\nArgs:\n    name: Optional name parameter (defaults to \"World\")\n    \nReturns:\n    Greeting message"}}, "/api/test-auth": {"get": {"operationId": "backend_api_modules_core_test_auth", "summary": "Test Auth", "parameters": [], "responses": {"200": {"description": "OK"}}, "description": "Test endpoint to check API status.\n\nBasic endpoint to verify API functionality and authentication status.\n\nReturns:\n    Dictionary with API status and user authentication info"}}, "/api/permissions": {"get": {"operationId": "backend_api_modules_core_get_user_permissions", "summary": "Get User Permissions", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserPermissionsSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get comprehensive permissions and display properties for the authenticated user.\n\nReturns detailed information about what the frontend should display based on\nthe user's role, admin type, class assignment, and other properties.\n\nReturns:\n    200: Complete permissions and display properties\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/tanev-config-status": {"get": {"operationId": "backend_api_modules_core_check_tanev_config_necessary", "summary": "Check Tanev Config Necessary", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TanevConfigStatusSchema"}}}}}, "description": "Checks if the system configuration setup wizard should be shown to system administrators.\nReturns detailed status of configuration steps that need to be completed.", "security": [{"JWTAuth": []}]}}, "/api/login": {"post": {"operationId": "backend_api_modules_auth_login", "summary": "Login", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "User login endpoint.\n\nAuthenticates user credentials and returns JWT token.\n\nArgs:\n    username: User's username\n    password: User's password\n    \nReturns:\n    200: Login successful with token and user info\n    401: Authentication failed", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"title": "FormParams", "type": "object", "properties": {"username": {"title": "Username", "type": "string"}, "password": {"title": "Password", "type": "string"}}, "required": ["username", "password"]}}}, "required": true}}}, "/api/profile": {"get": {"operationId": "backend_api_modules_auth_get_profile", "summary": "Get Profile", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/LoginSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get current user's profile information.\n\nRequires valid JWT token in Authorization header.\n\nReturns:\n    200: User profile information\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/dashboard": {"get": {"operationId": "backend_api_modules_auth_dashboard", "summary": "Dashboard", "parameters": [], "responses": {"200": {"description": "OK"}}, "description": "Protected dashboard endpoint.\n\nProvides basic dashboard information for authenticated users.\n\nReturns:\n    Dictionary with welcome message and user details", "security": [{"JWTAuth": []}]}}, "/api/refresh-token": {"post": {"operationId": "backend_api_modules_auth_refresh_token", "summary": "Refresh Token", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Refresh JWT token.\n\nGenerates new token for authenticated user.\n\nReturns:\n    200: New token generated\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/logout": {"post": {"operationId": "backend_api_modules_auth_logout", "summary": "Logout", "parameters": [], "responses": {"200": {"description": "OK"}}, "description": "User logout endpoint.\n\nNote: JWT tokens cannot be invalidated server-side without a blacklist.\nClient should discard the token.\n\nReturns:\n    Logout confirmation message", "security": [{"JWTAuth": []}]}}, "/api/forgot-password": {"post": {"operationId": "backend_api_modules_auth_forgot_password", "summary": "Forgot Password", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgotPasswordResponse"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Initiate password reset process.\n\nSends password reset email if user exists.\n\nArgs:\n    data: Request with email address\n    \nReturns:\n    200: Success message (always same for security)\n    400: Error occurred", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgotPasswordRequest"}}}, "required": true}}}, "/api/verify-reset-token/{token}": {"get": {"operationId": "backend_api_modules_auth_verify_reset_token", "summary": "Verify Reset Token", "parameters": [{"in": "path", "name": "token", "schema": {"title": "Token", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyTokenResponse"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Verify password reset token validity.\n\nArgs:\n    token: Password reset token\n    \nReturns:\n    200: Token validity status\n    400: Error occurred"}}, "/api/reset-password": {"post": {"operationId": "backend_api_modules_auth_reset_password", "summary": "Reset Password", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResetPasswordResponse"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Complete password reset process.\n\nUpdates user password using valid reset token.\n\nArgs:\n    data: Reset request with token and new password\n    \nReturns:\n    200: Password reset successful\n    400: Error occurred or invalid data", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ResetPasswordRequest"}}}, "required": true}}}, "/api/partners": {"get": {"operationId": "backend_api_modules_partners_get_partners", "summary": "Get Partners", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/PartnerSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all partners.\n\nPublic endpoint that returns all partners with their institution information.\n\nReturns:\n    200: List of all partners\n    401: Error occurred"}, "post": {"operationId": "backend_api_modules_partners_create_partner", "summary": "Create Partner", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartnerSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new partner.\n\nRequires authentication. Creates a new partner with optional institution assignment.\n\nArgs:\n    data: Partner creation data\n    \nReturns:\n    201: Partner created successfully\n    400: Invalid data or duplicate name\n    401: Authentication failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartnerCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/partners/{partner_id}": {"get": {"operationId": "backend_api_modules_partners_get_partner", "summary": "Get Partner", "parameters": [{"in": "path", "name": "partner_id", "schema": {"title": "Partner Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartnerSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get single partner by ID.\n\nPublic endpoint that returns detailed information about a specific partner.\n\nArgs:\n    partner_id: Unique partner identifier\n    \nReturns:\n    200: Partner details\n    404: Partner not found\n    401: Error occurred"}, "put": {"operationId": "backend_api_modules_partners_update_partner", "summary": "Update Partner", "parameters": [{"in": "path", "name": "partner_id", "schema": {"title": "Partner Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartnerSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing partner.\n\nRequires authentication. Updates partner information with provided data.\nOnly non-None fields are updated.\n\nArgs:\n    partner_id: Unique partner identifier\n    data: Partner update data\n    \nReturns:\n    200: Partner updated successfully\n    404: Partner not found\n    400: Invalid data or duplicate name\n    401: Authentication failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/PartnerUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_partners_delete_partner", "summary": "Delete Partner", "parameters": [{"in": "path", "name": "partner_id", "schema": {"title": "Partner Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete partner.\n\nRequires authentication. Permanently removes partner from database.\n\nArgs:\n    partner_id: Unique partner identifier\n    \nReturns:\n    200: Partner deleted successfully\n    404: Partner not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/radio-stabs": {"get": {"operationId": "backend_api_modules_radio_get_radio_stabs", "summary": "Get Radio Stabs", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RadioStabSchema"}, "title": "Response", "type": "array"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all radio stabs with member counts.\n\nRequires authentication. Returns information about all radio stabs\nincluding their member counts.\n\nReturns:\n    200: List of all radio stabs\n    500: Server error", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_radio_create_radio_stab", "summary": "Create Radio Stab", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadioStabSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "403": {"description": "Forbidden", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new radio stab.\n\nRequires admin permissions. Creates a new radio stab with unique team code.\n\nArgs:\n    data: Radio stab creation data\n    \nReturns:\n    201: Radio stab created successfully\n    400: Invalid data or duplicate team code\n    403: Insufficient permissions\n    500: Server error", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadioStabCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/radio-sessions": {"get": {"operationId": "backend_api_modules_radio_get_radio_sessions", "summary": "Get Radio Sessions", "parameters": [{"in": "query", "name": "start_date", "schema": {"title": "Start Date", "type": "string"}, "required": false}, {"in": "query", "name": "end_date", "schema": {"title": "End Date", "type": "string"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/RadioSessionSchema"}, "title": "Response", "type": "array"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get radio sessions with optional date filtering.\n\nRequires authentication. Returns radio sessions, optionally filtered\nby start and end dates.\n\nArgs:\n    start_date: Optional start date filter (ISO format)\n    end_date: Optional end date filter (ISO format)\n    \nReturns:\n    200: List of radio sessions\n    500: Server error", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_radio_create_radio_session", "summary": "Create Radio Session", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadioSessionSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "403": {"description": "Forbidden", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new radio session.\n\nRequires admin permissions. Creates a new radio session and optionally\nassigns participants.\n\nArgs:\n    data: Radio session creation data\n    \nReturns:\n    201: Radio session created successfully\n    400: Invalid data or radio stab not found\n    403: Insufficient permissions\n    500: Server error", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RadioSessionCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/users": {"get": {"operationId": "backend_api_modules_users_get_all_users", "summary": "Get All Users", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserProfileSchema"}, "title": "Response", "type": "array"}}}}, "403": {"description": "Forbidden", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all users with their profiles.\n\nRequires admin permissions. Returns detailed information about all users\nincluding their profiles, stab assignments, and roles.\n\nReturns:\n    200: List of all user profiles\n    403: Insufficient permissions\n    500: Server error", "security": [{"JWTAuth": []}]}}, "/api/users/{user_id}": {"get": {"operationId": "backend_api_modules_users_get_user_details", "summary": "Get User Details", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserProfileSchema"}}}}, "403": {"description": "Forbidden", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get detailed information about a specific user.\n\nRequires admin permissions. Returns comprehensive profile information\nfor the specified user.\n\nArgs:\n    user_id: Unique user identifier\n    \nReturns:\n    200: User profile details\n    403: Insufficient permissions\n    404: User not found\n    500: Server error", "security": [{"JWTAuth": []}]}}, "/api/users/radio-students": {"get": {"operationId": "backend_api_modules_users_get_radio_students", "summary": "Get Radio Students", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserProfileSchema"}, "title": "Response", "type": "array"}}}}, "403": {"description": "Forbidden", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all second year radio students (9F).\n\nRequires admin permissions. Returns profiles of students who are\nin their second year (9F class) and involved in radio activities.\n\nReturns:\n    200: List of 9F student profiles\n    403: Insufficient permissions\n    500: Server error", "security": [{"JWTAuth": []}]}}, "/api/users/{user_id}/availability": {"get": {"operationId": "backend_api_modules_users_check_user_availability", "summary": "Check User Availability", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}, {"in": "query", "name": "start_datetime", "schema": {"title": "Start Datetime", "type": "string"}, "required": true}, {"in": "query", "name": "end_datetime", "schema": {"title": "End Datetime", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Check user availability during specific time period.\n\nRequires authentication. Checks if a user is available during the\nspecified datetime range, considering absences and radio sessions.\n\nArgs:\n    user_id: Unique user identifier\n    start_datetime: Start of time period (ISO format)\n    end_datetime: End of time period (ISO format)\n    \nReturns:\n    200: Availability status with conflict details\n    400: Invalid datetime format\n    404: User not found\n    500: Server error", "security": [{"JWTAuth": []}]}}, "/api/users/active": {"get": {"operationId": "backend_api_modules_users_get_active_users", "summary": "Get Active Users", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ActiveUsersResponseSchema"}}}}, "500": {"description": "Internal Server Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get active users - both currently active (last 5 mins) and active today.\n\nReturns users in two categories:\n- active_now: Users who logged in within the last 5 minutes\n- active_today: Users who logged in today (but not necessarily active now)\n\nReturns:\n    200: Object with active_now and active_today user lists\n    500: Server error", "security": [{"JWTAuth": []}]}}, "/api/manage/users": {"get": {"operationId": "backend_api_modules_user_management_get_all_users_detailed", "summary": "Get All Users Detailed", "parameters": [{"in": "query", "name": "user_type", "schema": {"title": "User Type", "type": "string"}, "required": false}, {"in": "query", "name": "osztaly_id", "schema": {"title": "Osztaly Id", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserDetailSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get detailed list of all users for management.\n\nRequires system admin permissions. Returns comprehensive user information.\n\nArgs:\n    user_type: Filter by user type ('student', 'teacher', 'admin')\n    osztaly_id: Filter by class ID\n    \nReturns:\n    200: List of detailed user information\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_user_management_create_user", "summary": "Create User", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserDetailSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new user with profile.\n\nRequires system admin permissions. Creates user and associated profile.\n\nArgs:\n    data: User creation data\n    \nReturns:\n    201: User created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/manage/users/{user_id}": {"put": {"operationId": "backend_api_modules_user_management_update_user", "summary": "Update User", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserDetailSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing user and profile.\n\nRequires system admin permissions. Updates user and profile information.\n\nArgs:\n    user_id: User ID to update\n    data: User update data\n    \nReturns:\n    200: User updated successfully\n    404: User not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_user_management_delete_user", "summary": "Delete User", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete user and associated profile.\n\nRequires system admin permissions. Permanently removes user from database.\n\nArgs:\n    user_id: User ID to delete\n    \nReturns:\n    200: User deleted successfully\n    404: User not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/manage/users/{user_id}/generate-first-login-token": {"post": {"operationId": "backend_api_modules_user_management_generate_user_first_login_token", "summary": "Generate User First Login Token", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/FirstLoginTokenResponse"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Generate first-time login token for a specific user.\n\nFor teachers and manual token generation for system admins to copy and send personally.\n\nArgs:\n    user_id: User ID to generate token for\n    \nReturns:\n    201: Token generated successfully\n    404: User not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/manage/users/bulk-students": {"post": {"operationId": "backend_api_modules_user_management_create_bulk_students", "summary": "Create Bulk Students", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BulkEmailResponse"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create multiple students for a class and send first-login emails.\n\nRequires system admin permissions. Creates students in bulk and sends email tokens.\n\nArgs:\n    data: Bulk student creation data\n    \nReturns:\n    201: Students created and emails sent\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BulkStudentCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/first-login/verify-token": {"post": {"operationId": "backend_api_modules_user_management_verify_first_login_token_endpoint", "summary": "Verify First Login Token Endpoint", "parameters": [{"in": "query", "name": "token", "schema": {"title": "Token", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Verify first-time login token.\n\nPublic endpoint for token verification.\n\nArgs:\n    token: First-time login token\n    \nReturns:\n    200: Token verification result\n    400: Error occurred"}}, "/api/first-login/set-password": {"post": {"operationId": "backend_api_modules_user_management_set_first_password", "summary": "Set First Password", "parameters": [{"in": "query", "name": "token", "schema": {"title": "Token", "type": "string"}, "required": true}, {"in": "query", "name": "password", "schema": {"title": "Password", "type": "string"}, "required": true}, {"in": "query", "name": "confirm_password", "schema": {"title": "Confirm Password", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Set password using first-time login token.\n\nPublic endpoint for setting initial password.\n\nArgs:\n    token: First-time login token\n    password: New password\n    confirm_password: Password confirmation\n    \nReturns:\n    200: Password set successfully\n    400: Error occurred"}}, "/api/school-years": {"get": {"operationId": "backend_api_modules_academic_get_school_years", "summary": "Get School Years", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/TanevSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all school years.\n\nRequires authentication. Returns all school years with their\nbasic information and class counts.\n\nReturns:\n    200: List of all school years\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_academic_create_school_year", "summary": "Create School Year", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TanevSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new school year.\n\nRequires admin permissions. Creates a new school year with specified dates.\n\nArgs:\n    data: School year creation data\n    \nReturns:\n    201: School year created successfully\n    400: Invalid data or date validation failed\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TanevCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/school-years/{tanev_id}": {"get": {"operationId": "backend_api_modules_academic_get_school_year", "summary": "Get School Year", "parameters": [{"in": "path", "name": "tanev_id", "schema": {"title": "Tanev Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TanevSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get single school year by ID.\n\nRequires authentication. Returns detailed information about a specific school year.\n\nArgs:\n    tanev_id: Unique school year identifier\n    \nReturns:\n    200: School year details\n    404: School year not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/school-years/active": {"get": {"operationId": "backend_api_modules_academic_get_active_school_year", "summary": "Get Active School Year", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TanevSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get currently active school year.\n\nRequires authentication. Returns the school year that contains today's date.\n\nReturns:\n    200: Active school year details\n    404: No active school year found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/classes": {"get": {"operationId": "backend_api_modules_academic_get_classes", "summary": "Get Classes", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/OsztalySchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all classes.\n\nRequires authentication. Returns all classes with their\nbasic information and student counts.\n\nReturns:\n    200: List of all classes\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_academic_create_class", "summary": "Create Class", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OsztalySchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new class.\n\nRequires admin permissions. Creates a new class with specified parameters.\n\nArgs:\n    data: Class creation data\n    \nReturns:\n    201: Class created successfully\n    400: Invalid data or validation failed\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OsztalyCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/classes/{osztaly_id}": {"get": {"operationId": "backend_api_modules_academic_get_class", "summary": "Get Class", "parameters": [{"in": "path", "name": "osztaly_id", "schema": {"title": "Osztaly Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OsztalySchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get single class by ID.\n\nRequires authentication. Returns detailed information about a specific class.\n\nArgs:\n    osztaly_id: Unique class identifier\n    \nReturns:\n    200: Class details\n    404: Class not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_academic_update_class", "summary": "Update Class", "parameters": [{"in": "path", "name": "osztaly_id", "schema": {"title": "Osztaly Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/OsztalySchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing class.\n\nRequires admin permissions. Updates class information with provided data.\nOnly non-None fields are updated.\n\nArgs:\n    osztaly_id: Unique class identifier\n    data: Class update data\n    \nReturns:\n    200: Class updated successfully\n    404: Class not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/OsztalyUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_academic_delete_class", "summary": "Delete Class", "parameters": [{"in": "path", "name": "osztaly_id", "schema": {"title": "Osztaly Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete class.\n\nRequires admin permissions. Permanently removes class from database.\nNote: This will fail if there are students assigned to this class.\n\nArgs:\n    osztaly_id: Unique class identifier\n    \nReturns:\n    200: Class deleted successfully\n    404: Class not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/classes/by-section/{szekcio}": {"get": {"operationId": "backend_api_modules_academic_get_classes_by_section", "summary": "Get Classes By Section", "parameters": [{"in": "path", "name": "szekcio", "schema": {"title": "Szekcio", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/OsztalySchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get classes by section (A, B, F, etc.).\n\nRequires authentication. Returns all classes in the specified section.\n\nArgs:\n    szekcio: Section letter (e.g., 'F', 'A', 'B')\n    \nReturns:\n    200: List of classes in section\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/equipment-types": {"get": {"operationId": "backend_api_modules_equipment_get_equipment_types", "summary": "Get Equipment Types", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/EquipmentTipusSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all equipment types.\n\nRequires authentication. Returns all equipment types with their\nbasic information and equipment counts.\n\nReturns:\n    200: List of all equipment types\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_equipment_create_equipment_type", "summary": "Create Equipment Type", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentTipusSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new equipment type.\n\nRequires admin permissions. Creates a new equipment type.\n\nArgs:\n    data: Equipment type creation data\n    \nReturns:\n    201: Equipment type created successfully\n    400: Invalid data or duplicate name\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentTipusCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/equipment": {"get": {"operationId": "backend_api_modules_equipment_get_equipment", "summary": "Get Equipment", "parameters": [{"in": "query", "name": "functional_only", "schema": {"title": "Functional Only", "type": "boolean"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/EquipmentSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all equipment.\n\nRequires authentication. Returns all equipment with their\ndetailed information including type and functionality status.\n\nArgs:\n    functional_only: Optional filter for functional equipment only\n    \nReturns:\n    200: List of all equipment\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_equipment_create_equipment", "summary": "Create Equipment", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new equipment.\n\nRequires admin permissions. Creates new equipment with specified parameters.\n\nArgs:\n    data: Equipment creation data\n    \nReturns:\n    201: Equipment created successfully\n    400: Invalid data or duplicate nickname/serial\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/equipment/{equipment_id}": {"get": {"operationId": "backend_api_modules_equipment_get_equipment_details", "summary": "Get Equipment Details", "parameters": [{"in": "path", "name": "equipment_id", "schema": {"title": "Equipment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get single equipment by ID.\n\nRequires authentication. Returns detailed information about specific equipment.\n\nArgs:\n    equipment_id: Unique equipment identifier\n    \nReturns:\n    200: Equipment details\n    404: Equipment not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_equipment_update_equipment", "summary": "Update Equipment", "parameters": [{"in": "path", "name": "equipment_id", "schema": {"title": "Equipment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing equipment.\n\nRequires admin permissions. Updates equipment information with provided data.\nOnly non-None fields are updated.\n\nArgs:\n    equipment_id: Unique equipment identifier\n    data: Equipment update data\n    \nReturns:\n    200: Equipment updated successfully\n    404: Equipment not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_equipment_delete_equipment", "summary": "Delete Equipment", "parameters": [{"in": "path", "name": "equipment_id", "schema": {"title": "Equipment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete equipment.\n\nRequires admin permissions. Permanently removes equipment from database.\nNote: This may fail if equipment is referenced by filming sessions.\n\nArgs:\n    equipment_id: Unique equipment identifier\n    \nReturns:\n    200: Equipment deleted successfully\n    404: Equipment not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/equipment/by-type/{type_id}": {"get": {"operationId": "backend_api_modules_equipment_get_equipment_by_type", "summary": "Get Equipment By Type", "parameters": [{"in": "path", "name": "type_id", "schema": {"title": "Type Id", "type": "integer"}, "required": true}, {"in": "query", "name": "functional_only", "schema": {"title": "Functional Only", "type": "boolean"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/EquipmentSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get equipment by type.\n\nRequires authentication. Returns all equipment of a specific type.\n\nArgs:\n    type_id: Equipment type identifier\n    functional_only: Optional filter for functional equipment only\n    \nReturns:\n    200: List of equipment of specified type\n    404: Equipment type not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/equipment/{equipment_id}/availability": {"get": {"operationId": "backend_api_modules_equipment_check_equipment_availability", "summary": "Check Equipment Availability", "parameters": [{"in": "path", "name": "equipment_id", "schema": {"title": "Equipment Id", "type": "integer"}, "required": true}, {"in": "query", "name": "start_datetime", "schema": {"title": "Start Datetime", "type": "string"}, "required": true}, {"in": "query", "name": "end_datetime", "schema": {"title": "End Datetime", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/EquipmentAvailabilitySchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Check equipment availability during specific time period.\n\nRequires authentication. Checks if equipment is available during the\nspecified datetime range, considering filming sessions.\n\nArgs:\n    equipment_id: Unique equipment identifier\n    start_datetime: Start of time period (ISO format)\n    end_datetime: End of time period (ISO format)\n    \nReturns:\n    200: Availability status with conflict details\n    404: Equipment not found\n    401: Authentication failed\n    400: Invalid datetime format", "security": [{"JWTAuth": []}]}}, "/api/contact-persons": {"get": {"operationId": "backend_api_modules_production_get_contact_persons", "summary": "Get Contact Persons", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ContactPersonSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all contact persons.\n\nRequires authentication. Returns all contact persons with their information.\n\nReturns:\n    200: List of all contact persons\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_production_create_contact_person", "summary": "Create Contact Person", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactPersonSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new contact person.\n\nRequires admin permissions. Creates a new contact person.\n\nArgs:\n    data: Contact person creation data\n    \nReturns:\n    201: Contact person created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactPersonCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/filming-sessions": {"get": {"operationId": "backend_api_modules_production_get_filming_sessions", "summary": "Get Filming Sessions", "parameters": [{"in": "query", "name": "start_date", "schema": {"title": "Start Date", "type": "string"}, "required": false}, {"in": "query", "name": "end_date", "schema": {"title": "End Date", "type": "string"}, "required": false}, {"in": "query", "name": "type", "schema": {"title": "Type", "type": "string"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ForgatSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get filming sessions with optional filtering.\n\nRequires authentication. Returns filming sessions, optionally filtered\nby date range and/or type.\n\nArgs:\n    start_date: Optional start date filter (ISO format)\n    end_date: Optional end date filter (ISO format)\n    type: Optional type filter (kacsa, rendes, rendezveny, egyeb)\n    \nReturns:\n    200: List of filming sessions\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_production_create_filming_session", "summary": "Create Filming Session", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgatSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new filming session.\n\nRequires admin/teacher permissions. Creates a new filming session.\n\nArgs:\n    data: Filming session creation data\n    \nReturns:\n    201: Filming session created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgatCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/filming-sessions/{forgatas_id}": {"get": {"operationId": "backend_api_modules_production_get_filming_session", "summary": "Get Filming Session", "parameters": [{"in": "path", "name": "forgatas_id", "schema": {"title": "Forgatas Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgatSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get single filming session by ID.\n\nRequires authentication. Returns detailed information about a specific filming session.\n\nArgs:\n    forgatas_id: Unique filming session identifier\n    \nReturns:\n    200: Filming session details\n    404: Filming session not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_production_update_filming_session", "summary": "Update Filming Session", "parameters": [{"in": "path", "name": "forgatas_id", "schema": {"title": "Forgatas Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgatSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing filming session.\n\nRequires admin/teacher permissions. Updates filming session with provided data.\nOnly non-None fields are updated.\n\nArgs:\n    forgatas_id: Unique filming session identifier\n    data: Filming session update data\n    \nReturns:\n    200: Filming session updated successfully\n    404: Filming session not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgatUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_production_delete_filming_session", "summary": "Delete Filming Session", "parameters": [{"in": "path", "name": "forgatas_id", "schema": {"title": "Forgatas Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete filming session.\n\nRequires admin permissions. Permanently removes filming session from database.\n\nArgs:\n    forgatas_id: Unique filming session identifier\n    \nReturns:\n    200: Filming session deleted successfully\n    404: Filming session not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/filming-sessions/types": {"get": {"operationId": "backend_api_modules_production_get_filming_types", "summary": "Get Filming Types", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ForgatoTipusSchema"}, "title": "Response", "type": "array"}}}}}, "description": "Get available filming session types.\n\nPublic endpoint that returns all available filming session types.\n\nReturns:\n    200: List of filming session types"}}, "/api/announcements": {"get": {"operationId": "backend_api_modules_communications_get_announcements", "summary": "Get Announcements", "parameters": [{"in": "query", "name": "my_announcements", "schema": {"default": false, "title": "My Announcements", "type": "boolean"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/AnnouncementSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get announcements visible to the current user.\n\nRequires authentication. Returns announcements that the user can view.\nThis includes public announcements and those specifically targeted to the user.\n\nArgs:\n    my_announcements: If true, only return announcements where user is author\n    \nReturns:\n    200: List of announcements user can view\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_communications_create_announcement", "summary": "Create Announcement", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnouncementDetailSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new announcement.\n\nRequires admin/teacher permissions. Creates a new announcement, optionally\ntargeting specific users.\n\nArgs:\n    data: Announcement creation data\n    \nReturns:\n    201: Announcement created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnouncementCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/announcements/public": {"get": {"operationId": "backend_api_modules_communications_get_public_announcements", "summary": "Get Public Announcements", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/AnnouncementSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get public announcements (not targeted to specific users).\n\nRequires authentication. Returns announcements that have no specific recipients.\n\nReturns:\n    200: List of public announcements\n    401: Authentication failed", "security": [{"JWTAuth": []}]}}, "/api/announcements/{announcement_id}": {"get": {"operationId": "backend_api_modules_communications_get_announcement_details", "summary": "Get Announcement Details", "parameters": [{"in": "path", "name": "announcement_id", "schema": {"title": "Announcement Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnouncementDetailSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get detailed information about a specific announcement.\n\nRequires authentication and proper permissions to view the announcement.\n\nArgs:\n    announcement_id: Unique announcement identifier\n    \nReturns:\n    200: Detailed announcement information\n    404: Announcement not found or no permission to view\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_communications_update_announcement", "summary": "Update Announcement", "parameters": [{"in": "path", "name": "announcement_id", "schema": {"title": "Announcement Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnouncementDetailSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing announcement.\n\nRequires admin/teacher permissions or being the author of the announcement.\nUpdates announcement with provided data. Only non-None fields are updated.\n\nArgs:\n    announcement_id: Unique announcement identifier\n    data: Announcement update data\n    \nReturns:\n    200: Announcement updated successfully\n    404: Announcement not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/AnnouncementUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_communications_delete_announcement", "summary": "Delete Announcement", "parameters": [{"in": "path", "name": "announcement_id", "schema": {"title": "Announcement Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete announcement.\n\nRequires admin permissions or being the author of the announcement.\nPermanently removes announcement from database.\n\nArgs:\n    announcement_id: Unique announcement identifier\n    \nReturns:\n    200: Announcement deleted successfully\n    404: Announcement not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/announcements/{announcement_id}/recipients": {"get": {"operationId": "backend_api_modules_communications_get_announcement_recipients", "summary": "Get Announcement Recipients", "parameters": [{"in": "path", "name": "announcement_id", "schema": {"title": "Announcement Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserBasicSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get recipients of a specific announcement.\n\nRequires admin permissions or being the author of the announcement.\n\nArgs:\n    announcement_id: Unique announcement identifier\n    \nReturns:\n    200: List of announcement recipients\n    404: Announcement not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/stabs": {"get": {"operationId": "backend_api_modules_organization_get_stabs", "summary": "Get Stabs", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/StabSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all stabs (teams).\n\nRequires authentication. Returns all stabs with their member counts.\n\nReturns:\n    200: List of all stabs\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_organization_create_stab", "summary": "Create Stab", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/StabSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new stab (team).\n\nRequires admin permissions. Creates a new stab.\n\nArgs:\n    data: Stab creation data\n    \nReturns:\n    201: Stab created successfully\n    400: Invalid data or duplicate name\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/StabCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/roles": {"get": {"operationId": "backend_api_modules_organization_get_roles", "summary": "Get Roles", "parameters": [{"in": "query", "name": "year", "schema": {"title": "Year", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/SzerepkorSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all roles (szerepkorok).\n\nRequires authentication. Returns all roles, optionally filtered by year.\n\nArgs:\n    year: Optional year filter\n    \nReturns:\n    200: List of roles\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_organization_create_role", "summary": "Create Role", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SzerepkorSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new role (szerepkor).\n\nRequires admin permissions. Creates a new role.\n\nArgs:\n    data: Role creation data\n    \nReturns:\n    201: Role created successfully\n    400: Invalid data or duplicate name\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SzerepkorCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/role-relations": {"get": {"operationId": "backend_api_modules_organization_get_role_relations", "summary": "Get Role Relations", "parameters": [{"in": "query", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": false}, {"in": "query", "name": "role_id", "schema": {"title": "Role Id", "type": "integer"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/SzerepkorRelacioSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get role relations (user-role assignments).\n\nRequires authentication. Returns role relations, optionally filtered.\n\nArgs:\n    user_id: Optional user filter\n    role_id: Optional role filter\n    \nReturns:\n    200: List of role relations\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_organization_create_role_relation", "summary": "Create Role Relation", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SzerepkorRelacioSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new role relation (assign role to user).\n\nRequires admin permissions. Creates a new user-role assignment.\n\nArgs:\n    data: Role relation creation data\n    \nReturns:\n    201: Role relation created successfully\n    400: Invalid data or relation already exists\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/SzerepkorRelacioCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/role-relations/{relation_id}": {"delete": {"operationId": "backend_api_modules_organization_delete_role_relation", "summary": "Delete Role Relation", "parameters": [{"in": "path", "name": "relation_id", "schema": {"title": "Relation Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete role relation (remove role from user).\n\nRequires admin permissions. Removes user-role assignment.\n\nArgs:\n    relation_id: Unique role relation identifier\n    \nReturns:\n    200: Role relation deleted successfully\n    404: Role relation not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/assignments": {"get": {"operationId": "backend_api_modules_organization_get_assignments", "summary": "Get Assignments", "parameters": [{"in": "query", "name": "tanev_id", "schema": {"title": "Tanev Id", "type": "integer"}, "required": false}, {"in": "query", "name": "kesz", "schema": {"title": "Kesz", "type": "boolean"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/BeosztasSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get assignments (beosztasok).\n\nRequires authentication. Returns assignments, optionally filtered.\n\nArgs:\n    tanev_id: Optional school year filter\n    kesz: Optional completion status filter\n    \nReturns:\n    200: List of assignments\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_organization_create_assignment", "summary": "Create Assignment", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BeosztasDetailSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new assignment (beosztas).\n\nRequires admin permissions. Creates a new assignment with role relations.\n\nArgs:\n    data: Assignment creation data\n    \nReturns:\n    201: Assignment created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/BeosztasCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/assignments/{assignment_id}": {"get": {"operationId": "backend_api_modules_organization_get_assignment_details", "summary": "Get Assignment Details", "parameters": [{"in": "path", "name": "assignment_id", "schema": {"title": "Assignment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BeosztasDetailSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get detailed assignment information.\n\nRequires authentication. Returns full assignment details including role relations.\n\nArgs:\n    assignment_id: Unique assignment identifier\n    \nReturns:\n    200: Detailed assignment information\n    404: Assignment not found\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_organization_delete_assignment", "summary": "Delete Assignment", "parameters": [{"in": "path", "name": "assignment_id", "schema": {"title": "Assignment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete assignment.\n\nRequires admin permissions. Permanently removes assignment from database.\n\nArgs:\n    assignment_id: Unique assignment identifier\n    \nReturns:\n    200: Assignment deleted successfully\n    404: Assignment not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/assignments/{assignment_id}/toggle-complete": {"put": {"operationId": "backend_api_modules_organization_toggle_assignment_completion", "summary": "Toggle Assignment Completion", "parameters": [{"in": "path", "name": "assignment_id", "schema": {"title": "Assignment Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BeosztasDetailSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Toggle assignment completion status.\n\nRequires admin permissions. Toggles the 'kesz' (complete) status of an assignment.\n\nArgs:\n    assignment_id: Unique assignment identifier\n    \nReturns:\n    200: Assignment status updated\n    404: Assignment not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/absences": {"get": {"operationId": "backend_api_modules_absence_get_absences", "summary": "Get Absences", "parameters": [{"in": "query", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": false}, {"in": "query", "name": "start_date", "schema": {"title": "Start Date", "type": "string"}, "required": false}, {"in": "query", "name": "end_date", "schema": {"title": "End Date", "type": "string"}, "required": false}, {"in": "query", "name": "my_absences", "schema": {"default": false, "title": "My Absences", "type": "boolean"}, "required": false}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/TavolletSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get absences with optional filtering.\n\nRequires authentication. Returns absences visible to the user.\nUsers can see their own absences, admins can see all.\n\nArgs:\n    user_id: Optional user filter (admin only)\n    start_date: Optional start date filter (ISO format)\n    end_date: Optional end date filter (ISO format)\n    my_absences: If true, only return current user's absences\n    \nReturns:\n    200: List of absences\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_absence_create_absence", "summary": "Create Absence", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new absence.\n\nRequires authentication. Users can create absences for themselves,\nadmins can create absences for any user.\n\nArgs:\n    data: Absence creation data\n    \nReturns:\n    201: Absence created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletCreateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/absences/{absence_id}": {"get": {"operationId": "backend_api_modules_absence_get_absence_details", "summary": "Get Absence Details", "parameters": [{"in": "path", "name": "absence_id", "schema": {"title": "Absence Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get detailed information about a specific absence.\n\nRequires authentication and proper permissions to view the absence.\n\nArgs:\n    absence_id: Unique absence identifier\n    \nReturns:\n    200: Detailed absence information\n    404: Absence not found or no permission to view\n    401: Authentication failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_absence_update_absence", "summary": "Update Absence", "parameters": [{"in": "path", "name": "absence_id", "schema": {"title": "Absence Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing absence.\n\nRequires proper permissions. Users can update their own absences,\nadmins can update any absence. Only non-None fields are updated.\n\nArgs:\n    absence_id: Unique absence identifier\n    data: Absence update data\n    \nReturns:\n    200: Absence updated successfully\n    404: Absence not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_absence_delete_absence", "summary": "Delete Absence", "parameters": [{"in": "path", "name": "absence_id", "schema": {"title": "Absence Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete absence.\n\nRequires proper permissions. Users can delete their own absences,\nadmins can delete any absence.\n\nArgs:\n    absence_id: Unique absence identifier\n    \nReturns:\n    200: Absence deleted successfully\n    404: Absence not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/absences/{absence_id}/approve": {"put": {"operationId": "backend_api_modules_absence_approve_absence", "summary": "Approve Absence", "parameters": [{"in": "path", "name": "absence_id", "schema": {"title": "Absence Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Approve absence (set denied=False).\n\nRequires admin permissions. Approves a previously denied absence.\n\nArgs:\n    absence_id: Unique absence identifier\n    \nReturns:\n    200: Absence approved successfully\n    404: Absence not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/absences/{absence_id}/deny": {"put": {"operationId": "backend_api_modules_absence_deny_absence", "summary": "Deny Absence", "parameters": [{"in": "path", "name": "absence_id", "schema": {"title": "Absence Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TavolletSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Deny absence (set denied=True).\n\nRequires admin permissions. Denies an absence.\n\nArgs:\n    absence_id: Unique absence identifier\n    \nReturns:\n    200: Absence denied successfully\n    404: Absence not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/absences/user/{user_id}/conflicts": {"get": {"operationId": "backend_api_modules_absence_check_user_absence_conflicts", "summary": "Check User Absence Conflicts", "parameters": [{"in": "path", "name": "user_id", "schema": {"title": "User Id", "type": "integer"}, "required": true}, {"in": "query", "name": "start_date", "schema": {"title": "Start Date", "type": "string"}, "required": true}, {"in": "query", "name": "end_date", "schema": {"title": "End Date", "type": "string"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Check for absence conflicts for a specific user in a date range.\n\nRequires authentication and proper permissions.\n\nArgs:\n    user_id: Unique user identifier\n    start_date: Start date (ISO format)\n    end_date: End date (ISO format)\n    \nReturns:\n    200: Conflict information\n    404: User not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/config": {"get": {"operationId": "backend_api_modules_config_get_configurations", "summary": "Get Configurations", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/ConfigSchema"}, "title": "Response", "type": "array"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get all system configurations.\n\nRequires admin permissions. Returns all configuration objects.\nNote: Usually there should be only one Config instance.\n\nReturns:\n    200: List of all configurations\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}, "post": {"operationId": "backend_api_modules_config_create_configuration", "summary": "Create Configuration", "parameters": [], "responses": {"201": {"description": "Created", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Create new system configuration.\n\nRequires developer admin permissions. Creates a new configuration object.\nNote: Usually there should be only one Config instance.\n\nArgs:\n    data: Configuration creation data\n    \nReturns:\n    201: Configuration created successfully\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/config/{config_id}": {"get": {"operationId": "backend_api_modules_config_get_configuration", "summary": "Get Configuration", "parameters": [{"in": "path", "name": "config_id", "schema": {"title": "Config Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get specific system configuration by ID.\n\nRequires admin permissions. Returns detailed configuration information.\n\nArgs:\n    config_id: Unique configuration identifier\n    \nReturns:\n    200: Configuration details\n    404: Configuration not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_config_update_configuration", "summary": "Update Configuration", "parameters": [{"in": "path", "name": "config_id", "schema": {"title": "Config Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update existing system configuration.\n\nRequires developer admin permissions. Updates configuration with provided data.\nOnly non-None fields are updated.\n\nArgs:\n    config_id: Unique configuration identifier\n    data: Configuration update data\n    \nReturns:\n    200: Configuration updated successfully\n    404: Configuration not found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}, "delete": {"operationId": "backend_api_modules_config_delete_configuration", "summary": "Delete Configuration", "parameters": [{"in": "path", "name": "config_id", "schema": {"title": "Config Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Delete system configuration.\n\nRequires developer admin permissions. Permanently removes configuration.\nWARNING: This should be used very carefully as it affects system functionality.\n\nArgs:\n    config_id: Unique configuration identifier\n    \nReturns:\n    200: Configuration deleted successfully\n    404: Configuration not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/config/current": {"get": {"operationId": "backend_api_modules_config_get_current_configuration", "summary": "Get Current Configuration", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Get current/active system configuration.\n\nRequires admin permissions. Returns the first configuration object,\nwhich is typically the active one.\n\nReturns:\n    200: Current configuration details\n    404: No configuration found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}, "put": {"operationId": "backend_api_modules_config_update_current_configuration", "summary": "Update Current Configuration", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "400": {"description": "Bad Request", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Update the current/active system configuration.\n\nRequires developer admin permissions. Updates the first configuration object.\n\nArgs:\n    data: Configuration update data\n    \nReturns:\n    200: Configuration updated successfully\n    404: No configuration found\n    400: Invalid data\n    401: Authentication or permission failed", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigUpdateSchema"}}}, "required": true}, "security": [{"JWTAuth": []}]}}, "/api/config/{config_id}/toggle-active": {"put": {"operationId": "backend_api_modules_config_toggle_configuration_active", "summary": "Toggle Configuration Active", "parameters": [{"in": "path", "name": "config_id", "schema": {"title": "Config Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Toggle the active status of a configuration.\n\nRequires developer admin permissions. Toggles the 'active' field.\n\nArgs:\n    config_id: Unique configuration identifier\n    \nReturns:\n    200: Configuration toggled successfully\n    404: Configuration not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/config/{config_id}/toggle-emails": {"put": {"operationId": "backend_api_modules_config_toggle_configuration_emails", "summary": "Toggle Configuration Emails", "parameters": [{"in": "path", "name": "config_id", "schema": {"title": "Config Id", "type": "integer"}, "required": true}], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ConfigSchema"}}}}, "401": {"description": "Unauthorized", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}, "404": {"description": "Not Found", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ErrorSchema"}}}}}, "description": "Toggle the email permission of a configuration.\n\nRequires developer admin permissions. Toggles the 'allowEmails' field.\n\nArgs:\n    config_id: Unique configuration identifier\n    \nReturns:\n    200: Configuration toggled successfully\n    404: Configuration not found\n    401: Authentication or permission failed", "security": [{"JWTAuth": []}]}}, "/api/config/status": {"get": {"operationId": "backend_api_modules_config_get_system_status", "summary": "Get System Status", "parameters": [], "responses": {"200": {"description": "OK", "content": {"application/json": {"schema": {"additionalProperties": true, "title": "Response", "type": "object"}}}}}, "description": "Get basic system status information.\n\nPublic endpoint (no authentication required) that returns basic\nsystem operational status based on configuration.\n\nReturns:\n    200: Basic system status"}}}, "components": {"schemas": {"UserPermissionsSchema": {"description": "Response schema for user permissions and display properties.", "properties": {"user_info": {"additionalProperties": true, "title": "User Info", "type": "object"}, "permissions": {"additionalProperties": true, "title": "Permissions", "type": "object"}, "display_properties": {"additionalProperties": true, "title": "Display Properties", "type": "object"}, "role_info": {"additionalProperties": true, "title": "Role Info", "type": "object"}}, "required": ["user_info", "permissions", "display_properties", "role_info"], "title": "UserPermissionsSchema", "type": "object"}, "ErrorSchema": {"description": "Standard error response schema.", "properties": {"message": {"title": "Message", "type": "string"}}, "required": ["message"], "title": "ErrorSchema", "type": "object"}, "TanevConfigStatusSchema": {"description": "Response schema for school year configuration status.", "properties": {"config_necessary": {"title": "Config Necessary", "type": "boolean"}, "system_admin_setup_required": {"title": "System Admin Setup Required", "type": "boolean"}, "current_tanev": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Current Tanev"}, "missing_components": {"default": [], "items": {"type": "string"}, "title": "Missing Components", "type": "array"}, "setup_steps": {"default": [], "items": {"additionalProperties": true, "type": "object"}, "title": "Setup Steps", "type": "array"}}, "required": ["config_necessary", "system_admin_setup_required"], "title": "TanevConfigStatusSchema", "type": "object"}, "LoginSchema": {"description": "Response schema for successful login.", "properties": {"token": {"title": "Token", "type": "string"}, "user_id": {"title": "User Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "first_name": {"title": "First Name", "type": "string"}, "last_name": {"title": "Last Name", "type": "string"}, "email": {"title": "Email", "type": "string"}}, "required": ["token", "user_id", "username", "first_name", "last_name", "email"], "title": "LoginSchema", "type": "object"}, "ForgotPasswordResponse": {"description": "Response schema for password reset request.", "properties": {"message": {"title": "Message", "type": "string"}}, "required": ["message"], "title": "ForgotPasswordResponse", "type": "object"}, "ForgotPasswordRequest": {"description": "Request schema for password reset initiation.", "properties": {"email": {"title": "Email", "type": "string"}}, "required": ["email"], "title": "ForgotPasswordRequest", "type": "object"}, "VerifyTokenResponse": {"description": "Response schema for token verification.", "properties": {"valid": {"title": "Valid", "type": "boolean"}}, "required": ["valid"], "title": "VerifyTokenResponse", "type": "object"}, "ResetPasswordResponse": {"description": "Response schema for password reset completion.", "properties": {"message": {"title": "Message", "type": "string"}}, "required": ["message"], "title": "ResetPasswordResponse", "type": "object"}, "ResetPasswordRequest": {"description": "Request schema for password reset completion.", "properties": {"token": {"title": "Token", "type": "string"}, "password": {"title": "Password", "type": "string"}, "confirmPassword": {"title": "Confirmpassword", "type": "string"}}, "required": ["token", "password", "confirmPassword"], "title": "ResetPasswordRequest", "type": "object"}, "PartnerSchema": {"description": "Response schema for partner data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "address": {"default": "", "title": "Address", "type": "string"}, "institution": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Institution"}, "imageURL": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Imageurl"}}, "required": ["id", "name"], "title": "PartnerSchema", "type": "object"}, "PartnerCreateSchema": {"description": "Request schema for creating new partner.", "properties": {"name": {"title": "Name", "type": "string"}, "address": {"default": "", "title": "Address", "type": "string"}, "institution": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Institution"}, "imageURL": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Imageurl"}}, "required": ["name"], "title": "PartnerCreateSchema", "type": "object"}, "PartnerUpdateSchema": {"description": "Request schema for updating existing partner.", "properties": {"name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "institution": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Institution"}, "imageURL": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Imageurl"}}, "title": "PartnerUpdateSchema", "type": "object"}, "RadioStabSchema": {"description": "Response schema for radio stab data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "team_code": {"title": "Team Code", "type": "string"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "member_count": {"default": 0, "title": "Member Count", "type": "integer"}}, "required": ["id", "name", "team_code"], "title": "RadioStabSchema", "type": "object"}, "RadioStabCreateSchema": {"description": "Request schema for creating new radio stab.", "properties": {"name": {"title": "Name", "type": "string"}, "team_code": {"title": "Team Code", "type": "string"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}}, "required": ["name", "team_code"], "title": "RadioStabCreateSchema", "type": "object"}, "RadioSessionSchema": {"description": "Response schema for radio session data.", "properties": {"id": {"title": "Id", "type": "integer"}, "radio_stab": {"$ref": "#/components/schemas/RadioStabSchema"}, "date": {"title": "Date", "type": "string"}, "time_from": {"title": "Time From", "type": "string"}, "time_to": {"title": "Time To", "type": "string"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "participant_count": {"default": 0, "title": "Participant Count", "type": "integer"}}, "required": ["id", "radio_stab", "date", "time_from", "time_to"], "title": "RadioSessionSchema", "type": "object"}, "RadioSessionCreateSchema": {"description": "Request schema for creating new radio session.", "properties": {"radio_stab_id": {"title": "Radio Stab Id", "type": "integer"}, "date": {"title": "Date", "type": "string"}, "time_from": {"title": "Time From", "type": "string"}, "time_to": {"title": "Time To", "type": "string"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "participant_ids": {"default": [], "items": {"type": "integer"}, "title": "Participant Ids", "type": "array"}}, "required": ["radio_stab_id", "date", "time_from", "time_to"], "title": "RadioSessionCreateSchema", "type": "object"}, "UserProfileSchema": {"description": "Response schema for user profile data.", "properties": {"id": {"title": "Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "first_name": {"title": "First Name", "type": "string"}, "last_name": {"title": "Last Name", "type": "string"}, "email": {"title": "Email", "type": "string"}, "telefonszam": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Telefonszam"}, "medias": {"title": "Medias", "type": "boolean"}, "admin_type": {"title": "Admin Type", "type": "string"}, "stab_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Stab Name"}, "radio_stab_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Radio Stab Name"}, "osztaly_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Osztaly Name"}, "is_second_year_radio": {"default": false, "title": "Is Second Year Radio", "type": "boolean"}}, "required": ["id", "username", "first_name", "last_name", "email", "medias", "admin_type"], "title": "UserProfileSchema", "type": "object"}, "ActiveUserSchema": {"description": "Response schema for active user data.", "properties": {"user_id": {"title": "User Id", "type": "integer"}, "full_name": {"title": "Full Name", "type": "string"}, "last_login_time": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Last Login Time"}, "active": {"title": "Active", "type": "boolean"}}, "required": ["user_id", "full_name", "active"], "title": "ActiveUserSchema", "type": "object"}, "ActiveUsersResponseSchema": {"description": "Response schema for active users endpoint.", "properties": {"active_now": {"items": {"$ref": "#/components/schemas/ActiveUserSchema"}, "title": "Active Now", "type": "array"}, "active_today": {"items": {"$ref": "#/components/schemas/ActiveUserSchema"}, "title": "Active Today", "type": "array"}}, "required": ["active_now", "active_today"], "title": "ActiveUsersResponseSchema", "type": "object"}, "UserDetailSchema": {"description": "Detailed response schema for user data.", "properties": {"id": {"title": "Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "first_name": {"title": "First Name", "type": "string"}, "last_name": {"title": "Last Name", "type": "string"}, "email": {"title": "Email", "type": "string"}, "full_name": {"title": "Full Name", "type": "string"}, "is_active": {"title": "Is Active", "type": "boolean"}, "admin_type": {"title": "Admin Type", "type": "string"}, "special_role": {"title": "Special Role", "type": "string"}, "telefonszam": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Telefonszam"}, "osztaly": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Osztaly"}, "stab": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Stab"}, "radio_stab": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Radio Stab"}, "medias": {"title": "Medias", "type": "boolean"}, "password_set": {"title": "Password Set", "type": "boolean"}, "first_login_token_sent": {"title": "First Login Token Sent", "type": "boolean"}, "date_joined": {"title": "Date Joined", "type": "string"}, "last_login": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Last Login"}}, "required": ["id", "username", "first_name", "last_name", "email", "full_name", "is_active", "admin_type", "special_role", "medias", "password_set", "first_login_token_sent", "date_joined"], "title": "UserDetailSchema", "type": "object"}, "UserCreateSchema": {"description": "Request schema for creating new user.", "properties": {"username": {"title": "Username", "type": "string"}, "first_name": {"title": "First Name", "type": "string"}, "last_name": {"title": "Last Name", "type": "string"}, "email": {"title": "Email", "type": "string"}, "admin_type": {"default": "none", "title": "Admin Type", "type": "string"}, "special_role": {"default": "none", "title": "Special Role", "type": "string"}, "telefonszam": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Telefonszam"}, "osztaly_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Osztaly Id"}, "stab_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Stab Id"}, "radio_stab_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Radio Stab Id"}, "medias": {"default": true, "title": "Medias", "type": "boolean"}}, "required": ["username", "first_name", "last_name", "email"], "title": "UserCreateSchema", "type": "object"}, "UserUpdateSchema": {"description": "Request schema for updating existing user.", "properties": {"username": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Username"}, "first_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "First Name"}, "last_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Last Name"}, "email": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Email"}, "admin_type": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Admin Type"}, "special_role": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Special Role"}, "telefonszam": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Telefonszam"}, "osztaly_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Osztaly Id"}, "stab_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Stab Id"}, "radio_stab_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Radio Stab Id"}, "medias": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Medias"}, "is_active": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Active"}}, "title": "UserUpdateSchema", "type": "object"}, "FirstLoginTokenResponse": {"description": "Response schema for first login token generation.", "properties": {"user_id": {"title": "User Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "full_name": {"title": "Full Name", "type": "string"}, "token_url": {"title": "Token Url", "type": "string"}, "token": {"title": "Token", "type": "string"}, "expires_at": {"title": "Expires At", "type": "string"}}, "required": ["user_id", "username", "full_name", "token_url", "token", "expires_at"], "title": "FirstLoginTokenResponse", "type": "object"}, "BulkEmailResponse": {"description": "Response schema for bulk email sending.", "properties": {"total_users": {"title": "Total Users", "type": "integer"}, "emails_sent": {"title": "Emails Sent", "type": "integer"}, "failed_emails": {"items": {"type": "string"}, "title": "Failed Emails", "type": "array"}, "tokens_generated": {"title": "Tokens Generated", "type": "integer"}}, "required": ["total_users", "emails_sent", "failed_emails", "tokens_generated"], "title": "BulkEmailResponse", "type": "object"}, "BulkStudentCreateSchema": {"description": "Request schema for bulk student creation.", "properties": {"osztaly_id": {"title": "Osztaly Id", "type": "integer"}, "students": {"items": {"additionalProperties": true, "type": "object"}, "title": "Students", "type": "array"}, "send_emails": {"default": true, "title": "Send Emails", "type": "boolean"}}, "required": ["osztaly_id", "students"], "title": "BulkStudentCreateSchema", "type": "object"}, "TanevSchema": {"description": "Response schema for school year data.", "properties": {"id": {"title": "Id", "type": "integer"}, "start_date": {"title": "Start Date", "type": "string"}, "end_date": {"title": "End Date", "type": "string"}, "start_year": {"title": "Start Year", "type": "integer"}, "end_year": {"title": "End Year", "type": "integer"}, "display_name": {"title": "Display Name", "type": "string"}, "is_active": {"title": "Is Active", "type": "boolean"}, "osztaly_count": {"default": 0, "title": "Osztaly Count", "type": "integer"}}, "required": ["id", "start_date", "end_date", "start_year", "end_year", "display_name", "is_active"], "title": "TanevSchema", "type": "object"}, "TanevCreateSchema": {"description": "Request schema for creating new school year.", "properties": {"start_date": {"title": "Start Date", "type": "string"}, "end_date": {"title": "End Date", "type": "string"}}, "required": ["start_date", "end_date"], "title": "TanevCreateSchema", "type": "object"}, "OsztalySchema": {"description": "Response schema for class data.", "properties": {"id": {"title": "Id", "type": "integer"}, "start_year": {"title": "Start Year", "type": "integer"}, "szekcio": {"title": "Szekcio", "type": "string"}, "display_name": {"title": "Display Name", "type": "string"}, "current_display_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Current Display Name"}, "tanev": {"anyOf": [{"$ref": "#/components/schemas/TanevSchema"}, {"type": "null"}]}, "student_count": {"default": 0, "title": "Student Count", "type": "integer"}}, "required": ["id", "start_year", "szekcio", "display_name"], "title": "OsztalySchema", "type": "object"}, "OsztalyCreateSchema": {"description": "Request schema for creating new class.", "properties": {"start_year": {"title": "Start Year", "type": "integer"}, "szekcio": {"title": "Szekcio", "type": "string"}, "tanev_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Tanev Id"}}, "required": ["start_year", "szekcio"], "title": "OsztalyCreateSchema", "type": "object"}, "OsztalyUpdateSchema": {"description": "Request schema for updating existing class.", "properties": {"start_year": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Start Year"}, "szekcio": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Szekcio"}, "tanev_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Tanev Id"}}, "title": "OsztalyUpdateSchema", "type": "object"}, "EquipmentTipusSchema": {"description": "Response schema for equipment type data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "emoji": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Emoji"}, "equipment_count": {"default": 0, "title": "Equipment Count", "type": "integer"}}, "required": ["id", "name"], "title": "EquipmentTipusSchema", "type": "object"}, "EquipmentTipusCreateSchema": {"description": "Request schema for creating new equipment type.", "properties": {"name": {"title": "Name", "type": "string"}, "emoji": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Emoji"}}, "required": ["name"], "title": "EquipmentTipusCreateSchema", "type": "object"}, "EquipmentSchema": {"description": "Response schema for equipment data.", "properties": {"id": {"title": "Id", "type": "integer"}, "nickname": {"title": "Nickname", "type": "string"}, "brand": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Brand"}, "model": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Model"}, "serial_number": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Serial Number"}, "equipment_type": {"anyOf": [{"$ref": "#/components/schemas/EquipmentTipusSchema"}, {"type": "null"}]}, "functional": {"title": "Functional", "type": "boolean"}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}, "display_name": {"title": "Display Name", "type": "string"}}, "required": ["id", "nickname", "functional", "display_name"], "title": "EquipmentSchema", "type": "object"}, "EquipmentCreateSchema": {"description": "Request schema for creating new equipment.", "properties": {"nickname": {"title": "Nickname", "type": "string"}, "brand": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Brand"}, "model": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Model"}, "serial_number": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Serial Number"}, "equipment_type_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Equipment Type Id"}, "functional": {"default": true, "title": "Functional", "type": "boolean"}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}}, "required": ["nickname"], "title": "EquipmentCreateSchema", "type": "object"}, "EquipmentUpdateSchema": {"description": "Request schema for updating existing equipment.", "properties": {"nickname": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Nickname"}, "brand": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Brand"}, "model": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Model"}, "serial_number": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Serial Number"}, "equipment_type_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Equipment Type Id"}, "functional": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Functional"}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}}, "title": "EquipmentUpdateSchema", "type": "object"}, "EquipmentAvailabilitySchema": {"description": "Response schema for equipment availability.", "properties": {"equipment_id": {"title": "Equipment Id", "type": "integer"}, "available": {"title": "Available", "type": "boolean"}, "conflicts": {"default": [], "items": {"additionalProperties": true, "type": "object"}, "title": "Conflicts", "type": "array"}}, "required": ["equipment_id", "available"], "title": "EquipmentAvailabilitySchema", "type": "object"}, "ContactPersonSchema": {"description": "Response schema for contact person data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "email": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Email"}, "phone": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Phone"}}, "required": ["id", "name"], "title": "ContactPersonSchema", "type": "object"}, "ContactPersonCreateSchema": {"description": "Request schema for creating new contact person.", "properties": {"name": {"title": "Name", "type": "string"}, "email": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Email"}, "phone": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Phone"}}, "required": ["name"], "title": "ContactPersonCreateSchema", "type": "object"}, "ForgatSchema": {"description": "Response schema for filming session data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "date": {"title": "Date", "type": "string"}, "time_from": {"title": "Time From", "type": "string"}, "time_to": {"title": "Time To", "type": "string"}, "location": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Location"}, "contact_person": {"anyOf": [{"$ref": "#/components/schemas/ContactPersonSchema"}, {"type": "null"}]}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}, "type": {"title": "Type", "type": "string"}, "type_display": {"title": "Type Display", "type": "string"}, "related_kacsa": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Related Kacsa"}, "equipment_ids": {"default": [], "items": {"type": "integer"}, "title": "Equipment Ids", "type": "array"}, "equipment_count": {"default": 0, "title": "Equipment Count", "type": "integer"}, "tanev": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Tanev"}}, "required": ["id", "name", "description", "date", "time_from", "time_to", "type", "type_display"], "title": "ForgatSchema", "type": "object"}, "ForgatCreateSchema": {"description": "Request schema for creating new filming session.", "properties": {"name": {"title": "Name", "type": "string"}, "description": {"title": "Description", "type": "string"}, "date": {"title": "Date", "type": "string"}, "time_from": {"title": "Time From", "type": "string"}, "time_to": {"title": "Time To", "type": "string"}, "location_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Location Id"}, "contact_person_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Contact Person Id"}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}, "type": {"title": "Type", "type": "string"}, "related_kacsa_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Related Kacsa Id"}, "equipment_ids": {"default": [], "items": {"type": "integer"}, "title": "Equipment Ids", "type": "array"}}, "required": ["name", "description", "date", "time_from", "time_to", "type"], "title": "ForgatCreateSchema", "type": "object"}, "ForgatUpdateSchema": {"description": "Request schema for updating existing filming session.", "properties": {"name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Name"}, "description": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Description"}, "date": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Date"}, "time_from": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Time From"}, "time_to": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Time To"}, "location_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Location Id"}, "contact_person_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Contact Person Id"}, "notes": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Notes"}, "type": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Type"}, "related_kacsa_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Related Kacsa Id"}, "equipment_ids": {"anyOf": [{"items": {"type": "integer"}, "type": "array"}, {"type": "null"}], "title": "Equipment Ids"}}, "title": "ForgatUpdateSchema", "type": "object"}, "ForgatoTipusSchema": {"description": "Schema for filming types.", "properties": {"value": {"title": "Value", "type": "string"}, "label": {"title": "Label", "type": "string"}}, "required": ["value", "label"], "title": "ForgatoTipusSchema", "type": "object"}, "AnnouncementSchema": {"description": "Response schema for announcement data.", "properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title": "Title", "type": "string"}, "body": {"title": "Body", "type": "string"}, "author": {"anyOf": [{"$ref": "#/components/schemas/UserBasicSchema"}, {"type": "null"}]}, "created_at": {"title": "Created At", "type": "string"}, "updated_at": {"title": "Updated At", "type": "string"}, "recipient_count": {"default": 0, "title": "Recipient Count", "type": "integer"}, "is_targeted": {"default": false, "title": "Is Targeted", "type": "boolean"}}, "required": ["id", "title", "body", "created_at", "updated_at"], "title": "AnnouncementSchema", "type": "object"}, "UserBasicSchema": {"description": "Basic user information schema.", "properties": {"id": {"title": "Id", "type": "integer"}, "username": {"title": "Username", "type": "string"}, "first_name": {"title": "First Name", "type": "string"}, "last_name": {"title": "Last Name", "type": "string"}, "full_name": {"title": "Full Name", "type": "string"}}, "required": ["id", "username", "first_name", "last_name", "full_name"], "title": "UserBasicSchema", "type": "object"}, "AnnouncementDetailSchema": {"description": "Detailed response schema for announcement with recipients.", "properties": {"id": {"title": "Id", "type": "integer"}, "title": {"title": "Title", "type": "string"}, "body": {"title": "Body", "type": "string"}, "author": {"anyOf": [{"$ref": "#/components/schemas/UserBasicSchema"}, {"type": "null"}]}, "created_at": {"title": "Created At", "type": "string"}, "updated_at": {"title": "Updated At", "type": "string"}, "recipients": {"default": [], "items": {"$ref": "#/components/schemas/UserBasicSchema"}, "title": "Recipients", "type": "array"}, "recipient_count": {"default": 0, "title": "Recipient Count", "type": "integer"}, "is_targeted": {"default": false, "title": "Is Targeted", "type": "boolean"}}, "required": ["id", "title", "body", "created_at", "updated_at"], "title": "AnnouncementDetailSchema", "type": "object"}, "AnnouncementCreateSchema": {"description": "Request schema for creating new announcement.", "properties": {"title": {"title": "Title", "type": "string"}, "body": {"title": "Body", "type": "string"}, "recipient_ids": {"default": [], "items": {"type": "integer"}, "title": "Recipient Ids", "type": "array"}}, "required": ["title", "body"], "title": "AnnouncementCreateSchema", "type": "object"}, "AnnouncementUpdateSchema": {"description": "Request schema for updating existing announcement.", "properties": {"title": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Title"}, "body": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Body"}, "recipient_ids": {"anyOf": [{"items": {"type": "integer"}, "type": "array"}, {"type": "null"}], "title": "Recipient Ids"}}, "title": "AnnouncementUpdateSchema", "type": "object"}, "StabSchema": {"description": "Response schema for stab (team) data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "member_count": {"default": 0, "title": "Member Count", "type": "integer"}}, "required": ["id", "name"], "title": "StabSchema", "type": "object"}, "StabCreateSchema": {"description": "Request schema for creating new stab.", "properties": {"name": {"title": "Name", "type": "string"}}, "required": ["name"], "title": "StabCreateSchema", "type": "object"}, "SzerepkorSchema": {"description": "Response schema for role data.", "properties": {"id": {"title": "Id", "type": "integer"}, "name": {"title": "Name", "type": "string"}, "ev": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Ev"}, "year_display": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Year Display"}}, "required": ["id", "name"], "title": "SzerepkorSchema", "type": "object"}, "SzerepkorCreateSchema": {"description": "Request schema for creating new role.", "properties": {"name": {"title": "Name", "type": "string"}, "ev": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Ev"}}, "required": ["name"], "title": "SzerepkorCreateSchema", "type": "object"}, "SzerepkorRelacioSchema": {"description": "Response schema for role relation data.", "properties": {"id": {"title": "Id", "type": "integer"}, "user": {"$ref": "#/components/schemas/UserBasicSchema"}, "szerepkor": {"$ref": "#/components/schemas/SzerepkorSchema"}}, "required": ["id", "user", "szerepkor"], "title": "SzerepkorRelacioSchema", "type": "object"}, "SzerepkorRelacioCreateSchema": {"description": "Request schema for creating new role relation.", "properties": {"user_id": {"title": "User Id", "type": "integer"}, "szerepkor_id": {"title": "Szerepkor Id", "type": "integer"}}, "required": ["user_id", "szerepkor_id"], "title": "SzerepkorRelacioCreateSchema", "type": "object"}, "BeosztasSchema": {"description": "Response schema for assignment data.", "properties": {"id": {"title": "Id", "type": "integer"}, "kesz": {"title": "Kesz", "type": "boolean"}, "author": {"anyOf": [{"$ref": "#/components/schemas/UserBasicSchema"}, {"type": "null"}]}, "tanev": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Tanev"}, "created_at": {"title": "Created At", "type": "string"}, "role_relation_count": {"default": 0, "title": "Role Relation Count", "type": "integer"}}, "required": ["id", "kesz", "created_at"], "title": "BeosztasSchema", "type": "object"}, "BeosztasDetailSchema": {"description": "Detailed response schema for assignment with role relations.", "properties": {"id": {"title": "Id", "type": "integer"}, "kesz": {"title": "Kesz", "type": "boolean"}, "author": {"anyOf": [{"$ref": "#/components/schemas/UserBasicSchema"}, {"type": "null"}]}, "tanev": {"anyOf": [{"additionalProperties": true, "type": "object"}, {"type": "null"}], "title": "Tanev"}, "created_at": {"title": "Created At", "type": "string"}, "szerepkor_relaciok": {"default": [], "items": {"$ref": "#/components/schemas/SzerepkorRelacioSchema"}, "title": "Szerepkor Relaciok", "type": "array"}}, "required": ["id", "kesz", "created_at"], "title": "BeosztasDetailSchema", "type": "object"}, "BeosztasCreateSchema": {"description": "Request schema for creating new assignment.", "properties": {"kesz": {"default": false, "title": "Kesz", "type": "boolean"}, "tanev_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Tanev Id"}, "szerepkor_relacio_ids": {"default": [], "items": {"type": "integer"}, "title": "Szerepkor Relacio Ids", "type": "array"}}, "title": "BeosztasCreateSchema", "type": "object"}, "TavolletSchema": {"description": "Response schema for absence data.", "properties": {"id": {"title": "Id", "type": "integer"}, "user": {"$ref": "#/components/schemas/UserBasicSchema"}, "start_date": {"title": "Start Date", "type": "string"}, "end_date": {"title": "End Date", "type": "string"}, "reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Reason"}, "denied": {"title": "Denied", "type": "boolean"}, "duration_days": {"title": "Duration Days", "type": "integer"}, "status": {"title": "Status", "type": "string"}}, "required": ["id", "user", "start_date", "end_date", "denied", "duration_days", "status"], "title": "TavolletSchema", "type": "object"}, "TavolletCreateSchema": {"description": "Request schema for creating new absence.", "properties": {"user_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "User Id"}, "start_date": {"title": "Start Date", "type": "string"}, "end_date": {"title": "End Date", "type": "string"}, "reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Reason"}}, "required": ["start_date", "end_date"], "title": "TavolletCreateSchema", "type": "object"}, "TavolletUpdateSchema": {"description": "Request schema for updating existing absence.", "properties": {"start_date": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Start Date"}, "end_date": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "End Date"}, "reason": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Reason"}, "denied": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Denied"}}, "title": "TavolletUpdateSchema", "type": "object"}, "ConfigSchema": {"description": "Response schema for configuration data.", "properties": {"id": {"title": "Id", "type": "integer"}, "active": {"title": "Active", "type": "boolean"}, "allow_emails": {"title": "Allow Emails", "type": "boolean"}, "status": {"title": "Status", "type": "string"}}, "required": ["id", "active", "allow_emails", "status"], "title": "ConfigSchema", "type": "object"}, "ConfigUpdateSchema": {"description": "Request schema for updating configuration.", "properties": {"active": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Active"}, "allow_emails": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Allow Emails"}}, "title": "ConfigUpdateSchema", "type": "object"}}, "securitySchemes": {"JWTAuth": {"type": "http", "scheme": "bearer"}}}, "servers": []}