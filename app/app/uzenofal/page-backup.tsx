'use client';

import React, { useState } from 'react';
import { AppSidebar } from "@/components/app-sidebar";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  Search, 
  Pin, 
  MessageCircle, 
  Share2, 
  Filter,
  Calendar,
  User,
  Building,
  BellDot,
  Plus,
  Megaphone
} from 'lucide-react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeRaw from 'rehype-raw';
import { useApiQuery } from "@/lib/api-helpers";
import { AnnouncementSchema, AnnouncementDetailSchema } from "@/lib/types";
import { apiClient } from "@/lib/api";

export default function MessageBoardPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [categoryFilter, setCategoryFilter] = useState<string>('all')
  const [selectedPost, setSelectedPost] = useState<number | null>(null)
  
  // Fetch data from API
  const { data: announcements = [], loading, error } = useApiQuery(
    () => apiClient.getAnnouncements()
  )

  if (loading) {
    return (
      <SidebarProvider>
        <AppSidebar />
        <SidebarInset>
          <div className="p-6">
            <div className="text-center">Bet√∂lt√©s...</div>
          </div>
        </SidebarInset>
      </SidebarProvider>
    )
  }

  if (error) {
    return (
      <SidebarProvider>
        <AppSidebar />
        <SidebarInset>
          <div className="p-6">
            <div className="text-center text-red-500">
              Hiba t√∂rt√©nt az adatok bet√∂lt√©sekor: {error}
            </div>
          </div>
        </SidebarInset>
      </SidebarProvider>
    )
  }

  const announcementsArray = announcements as AnnouncementSchema[]

  // Filter announcements based on search and category
  const filteredAnnouncements = announcementsArray.filter(announcement => {
    const matchesSearch = searchTerm === "" || 
      announcement.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      announcement.body.toLowerCase().includes(searchTerm.toLowerCase())
    
    // For category filtering, we can use is_targeted or other properties
    const matchesCategory = categoryFilter === "all" || 
      (categoryFilter === "targeted" && announcement.is_targeted) ||
      (categoryFilter === "public" && !announcement.is_targeted)
    
    return matchesSearch && matchesCategory
  })

  // Sort by creation date, most recent first
  const sortedAnnouncements = [...filteredAnnouncements].sort((a, b) => 
    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
  )

  const formatTimestamp = (timestamp: string) => {
    const date = new Date(timestamp)
    const now = new Date()
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60))
    
    if (diffInHours < 1) {
      return 'Most'
    } else if (diffInHours < 24) {
      return `${diffInHours} √≥r√°ja`
    } else {
      return date.toLocaleDateString('hu-HU', { 
        month: 'short', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })
    }
  }

  const getCategoryBadge = (announcement: AnnouncementSchema) => {
    if (announcement.is_targeted) {
      return <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">C√©lzott</Badge>
    } else {
      return <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">Nyilv√°nos</Badge>
    }
  }
    id: 1,
    title: "üì¢ Fontos: √öj Biztons√°gi Protokoll",
    content: `# √öj Biztons√°gi Int√©zked√©sek

A **2025. augusztus 15-t≈ël** √©letbe l√©p≈ë √∫j biztons√°gi protokoll:

## F≈ëbb v√°ltoz√°sok:
- ‚úÖ K√∂telez≈ë v√©d≈ëfelszerel√©s minden forgat√°son
- ‚úÖ √öj regisztr√°ci√≥s folyamat k√ºls≈ë szem√©lyeknek
- ‚úÖ Biztons√°gi briefing minden projekt el≈ëtt

### Sz√ºks√©ges dokumentumok:
| Dokumentum | Hat√°rid≈ë | Felel≈ës |
|------------|----------|---------|
| Biztons√°gi k√©pz√©s | 2025.08.20 | Minden munkat√°rs |
| Eg√©szs√©g√ºgyi igazol√°s | 2025.08.25 | HR oszt√°ly |
| Felszerel√©s ellen≈ërz√©s | 2025.08.30 | M≈±szaki vezet≈ë |

> **Fontos:** A protokoll be nem tart√°sa munkav√°llal√≥i felel≈ëss√©gre von√°ssal j√°r.

Tov√°bbi inform√°ci√≥k: [Biztons√°gi szab√°lyzat](https://ztv.hu/biztonsag)`,
    author: "Szab√≥ P√©ter",
    department: "Biztons√°gi Oszt√°ly",
    timestamp: "2025-08-11 08:30",
    category: "urgent",
    pinned: true,
    isRead: false,
    avatar: "SP",
    comments: [
      {
        id: 1,
        author: "Nagy Anna",
        content: "Mikor lesz a k√∂vetkez≈ë biztons√°gi k√©pz√©s?",
        timestamp: "2025-08-11 09:15",
        avatar: "NA"
      }
    ]
  },
  {
    id: 2,
    title: "üé¨ Forgat√°si √útemterv - Augusztus",
    content: `## Augusztusi Forgat√°sok

### H√©tv√©g√©n zajl√≥ projektek:

**Augusztus 17-18 (Szombat-Vas√°rnap)**
- üé• **"M√∫lt Nyom√°ban"** - Dokumentumfilm
- üìç Helysz√≠n: V√°ci Duna-part
- ‚è∞ 06:00 - 18:00
- üë• St√°b l√©tsz√°m: 8 f≈ë

**Augusztus 24-25 (Szombat-Vas√°rnap)**  
- üé≠ **"√ñr√∂ks√©g"** - R√∂vidfilm
- üìç Helysz√≠n: Szentendre, Szabadt√©ri M√∫zeum
- ‚è∞ 07:00 - 20:00
- üë• St√°b l√©tsz√°m: 12 f≈ë

### TODO lista a forgat√°sokra:
- [ ] Kamerafelszerel√©s ellen≈ërz√©se
- [ ] Catering megszervez√©se
- [ ] Parkol√°si enged√©lyek beszerz√©se
- [x] Helysz√≠n bej√°r√°s elv√©gz√©se
- [ ] Statiszt√°k √©rtes√≠t√©se

**Jelentkez√©s:** K√©rj√ºk jelezz√©tek r√©szv√©teli sz√°nd√©kotokat a forgat√°svezet≈ëkn√©l! üìß`,
    author: "Kiss Tam√°s",
    department: "Produkci√≥s Oszt√°ly",
    timestamp: "2025-08-11 07:45",
    category: "shooting",
    pinned: false,
    isRead: true,
    avatar: "KT",
    comments: [
      {
        id: 2,
        author: "Moln√°r Zita",
        content: "A v√°ci forgat√°sra m√©g van hely?",
        timestamp: "2025-08-11 08:20",
        avatar: "MZ"
      },
      {
        id: 3,
        author: "Horv√°th G√°bor",
        content: "Szentendr√©re sz√≠vesen menn√©k operat≈ërnek!",
        timestamp: "2025-08-11 08:45",
        avatar: "HG"
      }
    ]
  },
  {
    id: 3,
    title: "üíº K√∂zbeszerz√©si P√°ly√°zat - Technikai Felszerel√©s",
    content: `# K√∂zbeszerz√©si Felh√≠v√°s
## Technikai Eszk√∂z√∂k Beszerz√©se

**P√°ly√°zat azonos√≠t√≥:** ZTV-2025-TECH-001  
**Bead√°si hat√°rid≈ë:** 2025. szeptember 15. 17:00

### Beszerzend≈ë eszk√∂z√∂k:

#### Kamer√°k √©s objekt√≠vek:
1. **Professzion√°lis kamer√°k** (3 db)
   - 4K felbont√°s minimum
   - LOG recording k√©pess√©g
   - Dual card slot
   - Becs√ºlt √©rt√©k: ~15M HUF

2. **Objekt√≠v k√©szlet** (teljes)
   - Prime lencs√©k 24mm, 35mm, 50mm, 85mm
   - Zoom objekt√≠v 24-70mm f/2.8
   - Becs√ºlt √©rt√©k: ~8M HUF

#### Audio eszk√∂z√∂k:
- Wireless mikrofonok (10 db)
- Boom mikrofonok (3 db)  
- Audio mixer (1 db)
- Becs√ºlt √©rt√©k: ~3M HUF

### P√°ly√°zati felt√©telek:
- ‚úîÔ∏è Legal√°bb 3 √©v garancia
- ‚úîÔ∏è Helysz√≠ni szerviz biztos√≠t√°s
- ‚úîÔ∏è K√©pz√©s a munkat√°rsaknak
- ‚úîÔ∏è Referenci√°k megad√°sa k√∂telez≈ë

**Kapcsolattart√≥:** Varga Eszter (eszter.varga@ztv.hu)  
**Telefon:** +36 1 234 5678

---

*A p√°ly√°zat r√©szletes felt√©teleit a [honlapunkon](https://ztv.hu/tender) tal√°lj√°k.*`,
    author: "Varga Eszter",
    department: "Beszerz√©si Oszt√°ly",
    timestamp: "2025-08-10 14:22",
    category: "tender",
    pinned: false,
    isRead: false,
    avatar: "VE",
    comments: []
  },
  {
    id: 4,
    title: "üèÜ Sikeres Filmfesztiv√°l R√©szv√©tel",
    content: `## Fantasztikus Eredm√©nyek! üéâ

Nagy √∂r√∂mmel jelentj√ºk, hogy a **"Csendes Vizek"** c√≠m≈± film√ºnk:

### D√≠jak √©s elismer√©sek:
- ü•á **Legjobb Operat≈ër d√≠j** - Kov√°cs Mikl√≥s
- ü•à **K√ºl√∂nd√≠j a legjobb hang√©rt** - Balogh Rita  
- üèÖ **K√∂z√∂ns√©gd√≠j** - 2. helyez√©s

### Fesztiv√°l statisztik√°k:
- **122** film indult a versenyben
- **18** orsz√°gb√≥l √©rkeztek alkot√°sok
- **~2000** n√©z≈ë szavazott a k√∂z√∂ns√©gd√≠jn√°l

**Gratul√°lunk** az eg√©sz st√°bnak! üëè

A k√∂vetkez≈ë c√©lunk a **Cannes-i Filmfesztiv√°l** - jelentkez√©si hat√°rid≈ë november 30.

---

*A d√≠jkioszt√≥ g√°l√°n k√©sz√ºlt fot√≥k hamarosan el√©rhet≈ëk lesznek a bels≈ë gal√©ri√°ban.*`,
    author: "Dr. T√≥th Katalin",
    department: "Igazgat√≥s√°g",
    timestamp: "2025-08-09 16:15",
    category: "announcement",
    pinned: false,
    isRead: true,
    avatar: "TK",
    comments: [
      {
        id: 4,
        author: "Kov√°cs Mikl√≥s",
        content: "K√∂sz√∂n√∂m a gratul√°ci√≥! Csapatmunka volt! üôè",
        timestamp: "2025-08-09 17:30",
        avatar: "KM"
      }
    ]
  },
  {
    id: 5,
    title: "‚òï Csapat√©p√≠t≈ë Program - Augusztus 30.",
    content: `# Csapat√©p√≠t≈ë Nap! üéâ

**Id≈ëpont:** 2025. augusztus 30. (p√©ntek)  
**Helysz√≠n:** Visegr√°d, Bobp√°lya √©s Adventure Park  
**Indul√°s:** 09:00 (ZTV parkol√≥)

## Program:
- **09:00 - 10:00** Utaz√°s busszal ‚òÅÔ∏è
- **10:00 - 12:00** Bobp√°lya verseny üõ∑
- **12:00 - 13:30** Eb√©d a Duna-parton üçΩÔ∏è
- **13:30 - 16:00** Adventure park kih√≠v√°sok üå≤
- **16:00 - 17:00** Vissza√∫t üöå

### Jelentkez√©s:
K√©rj√ºk jelezz√©tek **augusztus 20-ig** a HR-n√©l!

**R√©szv√©teli d√≠j:** 5.000 Ft/f≈ë (eb√©d + program)  
**L√©tsz√°m korl√°t:** 30 f≈ë

> Ez egy remek alkalom, hogy jobban megismerj√ºk egym√°st a munkahelyi k√∂rnyezeten k√≠v√ºl is! üòä

**Kapcsolat:** hr@ztv.hu vagy Szab√≥ Judit (123-as mell√©k)`,
    author: "Szab√≥ Judit",
    department: "HR Oszt√°ly", 
    timestamp: "2025-08-08 11:10",
    category: "general",
    pinned: false,
    isRead: true,
    avatar: "SJ",
    comments: [
      {
        id: 5,
        author: "Papp L√°szl√≥",
        content: "Szuper program! M√°r jelentkeztem is üöÄ",
        timestamp: "2025-08-08 12:45",
        avatar: "PL"
      }
    ]
  }
];

// Custom markdown components with theme support
const MarkdownRenderer: React.FC<{ content: string }> = ({ content }) => {
  return (
    <div className="prose prose-sm max-w-none dark:prose-invert">
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        rehypePlugins={[rehypeRaw]}
        components={{
          // Headers
          h1: ({ children }) => (
            <h1 className="text-xl font-bold mb-3 border-b pb-2">
              {children}
            </h1>
          ),
          h2: ({ children }) => (
            <h2 className="text-lg font-semibold mb-2 mt-4">
              {children}
            </h2>
          ),
          h3: ({ children }) => (
            <h3 className="text-md font-medium mb-2 mt-3">
              {children}
            </h3>
          ),
          // Paragraphs
          p: ({ children }) => (
            <p className="mb-2 leading-relaxed">
              {children}
            </p>
          ),
          // Strong/Bold text
          strong: ({ children }) => (
            <strong className="font-semibold">
              {children}
            </strong>
          ),
          // Lists
          ul: ({ children }) => (
            <ul className="list-disc list-inside mb-3 space-y-1">
              {children}
            </ul>
          ),
          ol: ({ children }) => (
            <ol className="list-decimal list-inside mb-3 space-y-1">
              {children}
            </ol>
          ),
          // Task lists
          li: ({ children, className }) => {
            const isTaskList = className?.includes('task-list-item');
            return (
              <li className={`${isTaskList ? 'list-none flex items-center gap-2' : ''}`}>
                {children}
              </li>
            );
          },
          // Links
          a: ({ href, children }) => (
            <a 
              href={href} 
              className="text-primary hover:underline"
              target="_blank" 
              rel="noopener noreferrer"
            >
              {children}
            </a>
          ),
          // Tables
          table: ({ children }) => (
            <div className="overflow-x-auto mb-4">
              <table className="min-w-full border rounded-lg">
                {children}
              </table>
            </div>
          ),
          thead: ({ children }) => (
            <thead className="bg-muted">
              {children}
            </thead>
          ),
          th: ({ children }) => (
            <th className="px-4 py-2 text-left font-medium border-b">
              {children}
            </th>
          ),
          td: ({ children }) => (
            <td className="px-4 py-2 border-b">
              {children}
            </td>
          ),
          // Blockquotes
          blockquote: ({ children }) => (
            <blockquote className="border-l-4 border-primary/20 pl-4 py-2 mb-3 bg-muted/50 rounded-r">
              <div className="italic">
                {children}
              </div>
            </blockquote>
          ),
          // Code
          code: ({ className, children }) => {
            const isInline = !className;
            return isInline ? (
              <code className="bg-muted px-1 py-0.5 rounded text-sm font-mono">
                {children}
              </code>
            ) : (
              <pre className="bg-muted p-3 rounded-lg overflow-x-auto mb-3">
                <code className="text-sm font-mono">
                  {children}
                </code>
              </pre>
            );
          },
          // Horizontal rule
          hr: () => (
            <hr className="border-border my-4" />
          )
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
};

const getCategoryColor = (category: Post['category']) => {
  switch (category) {
    case 'urgent': return 'bg-destructive/10 text-destructive hover:bg-destructive/20';
    case 'announcement': return 'bg-primary/10 text-primary hover:bg-primary/20';
    case 'shooting': return 'bg-purple-500/10 text-purple-600 dark:text-purple-400 hover:bg-purple-500/20';
    case 'tender': return 'bg-yellow-500/10 text-yellow-700 dark:text-yellow-400 hover:bg-yellow-500/20';
    case 'general': return 'bg-muted text-muted-foreground hover:bg-muted/80';
    default: return 'bg-muted text-muted-foreground hover:bg-muted/80';
  }
};

const getCategoryLabel = (category: Post['category']) => {
  switch (category) {
    case 'urgent': return 'S√ºrg≈ës';
    case 'announcement': return 'K√∂zlem√©ny';
    case 'shooting': return 'Forgat√°s';
    case 'tender': return 'P√°ly√°zat';
    case 'general': return '√Åltal√°nos';
    default: return 'Egy√©b';
  }
};

export default function MessageWallPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedFilter, setSelectedFilter] = useState<'all' | 'unread' | 'urgent'>('all');
  const [posts, setPosts] = useState<Post[]>(mockPosts);

  const filteredPosts = posts.filter(post => {
    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase()) || 
                         post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         post.author.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesFilter = selectedFilter === 'all' || 
                         (selectedFilter === 'unread' && !post.isRead) ||
                         (selectedFilter === 'urgent' && post.category === 'urgent');
    
    return matchesSearch && matchesFilter;
  }).sort((a, b) => {
    // Pinned posts first, then by timestamp
    if (a.pinned && !b.pinned) return -1;
    if (!a.pinned && b.pinned) return 1;
    return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
  });

  const markAsRead = (postId: number) => {
    setPosts(posts.map(post => 
      post.id === postId ? { ...post, isRead: true } : post
    ));
  };

  const unreadCount = posts.filter(post => !post.isRead).length;

  return (
    <SidebarProvider
      style={
        {
          "--sidebar-width": "calc(var(--spacing) * 72)",
          "--header-height": "calc(var(--spacing) * 12)",
        } as React.CSSProperties
      }
    >
      <AppSidebar variant="inset" />
      <SidebarInset>
        <SiteHeader />
        <div className="flex-1 space-y-4 p-4 md:p-6">
          {/* Header */}
          <Card>
            <CardHeader>
              <div className="flex items-center gap-3">
                <div className="p-2 bg-primary rounded-lg">
                  <BellDot className="h-5 w-5 text-primary-foreground" />
                </div>
                <div>
                  <CardTitle className="text-2xl">√úzen≈ëfal</CardTitle>
                  <CardDescription>C√©ges h√≠rek, k√∂zlem√©nyek √©s inform√°ci√≥k</CardDescription>
                </div>
              </div>
            </CardHeader>
          </Card>

          {/* Search and Filters */}
          <Card>
            <CardContent className="p-4">
              <div className="flex flex-col sm:flex-row gap-4">
                <div className="flex-1 relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4" />
                  <Input
                    placeholder="Keres√©s a bejegyz√©sek k√∂z√∂tt..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="pl-10"
                  />
                </div>
                
                <div className="flex gap-2">
                  <Button
                    variant={selectedFilter === 'all' ? 'default' : 'outline'}
                    onClick={() => setSelectedFilter('all')}
                    className="whitespace-nowrap"
                  >
                    <Filter className="h-4 w-4 mr-2" />
                    √ñsszes
                  </Button>
                  <Button
                    variant={selectedFilter === 'unread' ? 'default' : 'outline'}
                    onClick={() => setSelectedFilter('unread')}
                    className="whitespace-nowrap"
                  >
                    Olvasatlan {unreadCount > 0 && <Badge className="ml-2" variant="secondary">{unreadCount}</Badge>}
                  </Button>
                  <Button
                    variant={selectedFilter === 'urgent' ? 'default' : 'outline'}
                    onClick={() => setSelectedFilter('urgent')}
                    className="whitespace-nowrap"
                  >
                    S√ºrg≈ës
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Posts */}
          <div className="space-y-4">
            {filteredPosts.length === 0 ? (
              <Card>
                <CardContent className="p-8 text-center">
                  <p className="text-muted-foreground">Nincs tal√°lat a keres√©si felt√©teleknek megfelel≈ëen.</p>
                </CardContent>
              </Card>
            ) : (
              filteredPosts.map((post) => (
                <Card 
                  key={post.id} 
                  className={`transition-all hover:shadow-md ${
                    post.pinned ? 'ring-2 ring-primary/20 bg-primary/5' : ''
                  } ${
                    !post.isRead ? 'border-l-4 border-l-primary' : ''
                  }`}
                >
                  <CardHeader className="pb-3">
                    <div className="flex items-start justify-between">
                      <div className="flex items-start gap-3 flex-1">
                        <Avatar className="h-10 w-10">
                          <AvatarImage src={`/avatars/${post.avatar}.png`} />
                          <AvatarFallback className="bg-muted">
                            {post.avatar}
                          </AvatarFallback>
                        </Avatar>
                        
                        <div className="flex-1 min-w-0">
                          <div className="flex items-center gap-2 mb-1">
                            <h2 className="font-semibold truncate">
                              {post.title}
                            </h2>
                            {post.pinned && <Pin className="h-4 w-4 text-primary" />}
                          </div>
                          
                          <div className="flex items-center gap-2 text-sm text-muted-foreground">
                            <User className="h-3 w-3" />
                            <span>{post.author}</span>
                            <span>‚Ä¢</span>
                            <Building className="h-3 w-3" />
                            <span>{post.department}</span>
                            <span>‚Ä¢</span>
                            <Calendar className="h-3 w-3" />
                            <span>{post.timestamp}</span>
                          </div>
                        </div>
                      </div>
                      
                      <div className="flex items-center gap-2">
                        <Badge 
                          variant="secondary" 
                          className={getCategoryColor(post.category)}
                        >
                          {getCategoryLabel(post.category)}
                        </Badge>
                        {!post.isRead && (
                          <div className="w-2 h-2 bg-primary rounded-full" />
                        )}
                      </div>
                    </div>
                  </CardHeader>

                  <CardContent className="pt-0">
                    <div 
                      className="cursor-pointer"
                      onClick={() => !post.isRead && markAsRead(post.id)}
                    >
                      <MarkdownRenderer content={post.content} />
                    </div>

                    {/* Comments */}
                    <div className="mt-4 pt-4 border-t">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-4 text-sm text-muted-foreground">
                          <div className="flex items-center gap-1">
                            <MessageCircle className="h-4 w-4" />
                            <span>{post.comments.length} hozz√°sz√≥l√°s</span>
                          </div>
                        </div>
                        
                        <div className="flex items-center gap-2">
                          <Button variant="ghost" size="sm" disabled>
                            <MessageCircle className="h-4 w-4 mr-1" />
                            Hozz√°sz√≥l√°s
                          </Button>
                          <Button variant="ghost" size="sm" disabled>
                            <Share2 className="h-4 w-4 mr-1" />
                            Megoszt√°s
                          </Button>
                        </div>
                      </div>

                      {/* Comments Display */}
                      {post.comments.length > 0 && (
                        <div className="mt-4 space-y-3">
                          {post.comments.map((comment) => (
                            <div key={comment.id} className="flex items-start gap-2 bg-muted/50 p-3 rounded-lg">
                              <Avatar className="h-8 w-8">
                                <AvatarImage src={`/avatars/${comment.avatar}.png`} />
                                <AvatarFallback className="bg-muted text-xs">
                                  {comment.avatar}
                                </AvatarFallback>
                              </Avatar>
                              <div className="flex-1">
                                <div className="flex items-center gap-2 mb-1">
                                  <span className="font-medium text-sm">{comment.author}</span>
                                  <span className="text-xs text-muted-foreground">{comment.timestamp}</span>
                                </div>
                                <p className="text-sm">{comment.content}</p>
                              </div>
                            </div>
                          ))}
                        </div>
                      )}

                      {/* Disabled Notice */}
                      <div className="mt-3 text-center">
                        <span className="text-xs text-muted-foreground bg-muted px-3 py-1 rounded-full">
                          Hozz√°sz√≥l√°sok √©s megoszt√°s letiltva
                        </span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
